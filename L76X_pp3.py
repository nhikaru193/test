#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pigpio
import time

# ─────────────────────────────────────────────────────────
# 送信先 GPIO とボーレート設定（自由に変更可）
# ─────────────────────────────────────────────────────────

TX_PIN = 17      # 例: BCM17（ピン11）を「ソフトUART TX」として使う
BAUD   = 9600    # ボーレート（例: NMEA デフォルト 9600bps）

# ─────────────────────────────────────────────────────────
# pigpio 初期化／デーモン接続確認
# ─────────────────────────────────────────────────────────

pi = pigpio.pi()
if not pi.connected:
    print("pigpio デーモンに接続できません。")
    exit(1)

# ─────────────────────────────────────────────────────────
# wave_add_serial で送信する NMEA 文字列を定義
# （ここでは例として「テスト用 NMEA」をそのまま送ってみる）
# ─────────────────────────────────────────────────────────

# 実際には、必要に応じて pyserial などで受信した GPS 情報から
# 「lat,lon」等を組み立て、「$GPRMC,....」の形式で文字列を作成します。
# 今回は例示のため固定文字列を使います。

nmea_message = "$GPRMC,123519,A,3539.1234,N,13944.5678,E,0.00,0.0,010621,0.0,W*6A\r\n"

# ─────────────────────────────────────────────────────────
# 1回だけ NMEA を波形化して送信する例
# （ループさせたい場合は for 文や while True で繰り返しても OK）
# ─────────────────────────────────────────────────────────

# 1. 既存の wave をクリア
pi.wave_clear()

# 2. NMEA 文字列を波形データとして登録
#    → 波形中にスタートビット・8bit データ・ストップビット が自動的に生成される
pi.wave_add_serial(TX_PIN, BAUD, nmea_message)

# 3. 波形ID を取得
wave_id = pi.wave_create()
if wave_id < 0:
    print("Wave の生成に失敗しました。")
    pi.stop()
    exit(1)

# 4. 波形（UART データ）を送信
pi.wave_send_once(wave_id)

# 5. 波形送信が終わるまで待機
while pi.wave_tx_busy():
    time.sleep(0.01)

# 6. 送信後は不要になった wave を削除
pi.wave_delete(wave_id)

print("NMEA 文字列を送信しました:", nmea_message.strip())

# ─────────────────────────────────────────────────────────
# 必要に応じて：複数回繰り返す場合は上記ステップを再度実行
# ─────────────────────────────────────────────────────────

# ─────────────────────────────────────────────────────────
# pigpio 終了処理
# ─────────────────────────────────────────────────────────
pi.stop()
